module eval

const empty = Void{}

type Object = Array | Charptr | Float | Int | Ptr | Uint | Void | []Object | bool | byteptr |
	rune | string | voidptr

// string is the same as the autogenerated str() methods
pub fn (o Object) string() string {
	match o {
		bool {
			return o.str()
		}
		Int {
			return o.val.str()
		}
		Uint {
			return o.val.str()
		}
		Float {
			return o.val.str()
		}
		string {
			return o
		}
		Void {
			return ''
		}
		[]Object {
			mut res := '('
			for i, obj in o {
				res += obj.str()
				if i + 1 != o.len {
					res += ', '
				}
			}
			return res + ')'
		}
		voidptr {
			return o.str()
		}
		byteptr {
			return o.str()
		}
		Charptr {
			return o.str()
		}
		rune {
			return o.str()
		}
		Array {
			mut res := '['
			for i, val in o.val {
				res += val.string()
				if i + 1 != o.val.len {
					res += ', '
				}
			}
			return res + ']'
		}
		Ptr {
			return o.str()
		}
	}
}

struct Void {}

pub struct Int {
pub mut:
	val  i64
	size i8 // 8/16/32/64
}

pub struct Uint {
pub mut:
	val  u64
	size i8 // 8/16/32/64
}

pub struct Float {
pub mut:
	val  f64
	size i8 // 8/16/32/64
}

pub struct Array {
pub mut:
	val []Object
}

type Charptr = &i8

pub struct Ptr {
	val &Object
}

// override the autogenerated str, since it does not work
fn (p Ptr) str() string {
	return byteptr(p.val).str()
}
